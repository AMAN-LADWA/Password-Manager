import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { ALERT_CONFIG } from '../alert.config';
import { scan, take } from 'rxjs/internal/operators';
import { AlertReducer } from './alert.reducer';
let AlertService = class AlertService {
    constructor(config) {
        this.config = config;
        this.dispatcher = new Subject();
        this.state = new BehaviorSubject([]);
        this.initConfig();
        this.dispatcher
            .pipe(scan(AlertReducer.reduce, []))
            .subscribe(this.state);
    }
    initConfig() {
        if (!this.config) {
            this.config = {};
        }
        this.config.timeout = !!this.config.timeout ? this.config.timeout : 5000;
        this.config.maxMessages = !!this.config.maxMessages ? this.config.maxMessages : 5;
    }
    get messages() {
        return this.state.asObservable();
    }
    info(msg) {
        this.addAlert({ content: msg, type: 'info' });
    }
    danger(msg) {
        this.addAlert({ content: msg, type: 'danger' });
    }
    success(msg) {
        this.addAlert({ content: msg, type: 'success' });
    }
    warning(msg) {
        this.addAlert({ content: msg, type: 'warning' });
    }
    close(alert) {
        this.dispatcher.next({ fn: AlertReducer.remove, alert: alert, config: this.config });
    }
    addAlert(alert) {
        this.dispatcher.next({ fn: AlertReducer.add, alert: alert, config: this.config });
        if (this.config.timeout > 0) {
            timer(this.config.timeout)
                .pipe(take(1))
                .subscribe(() => {
                this.dispatcher.next({ fn: AlertReducer.remove, alert: alert, config: this.config });
            });
        }
    }
};
AlertService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [ALERT_CONFIG,] }] }
];
AlertService = __decorate([
    Injectable(),
    __param(0, Inject(ALERT_CONFIG)),
    __metadata("design:paramtypes", [Object])
], AlertService);
export { AlertService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hbGVydHMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9hbGVydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUMsZUFBZSxFQUFjLE9BQU8sRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDakUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTdDLE9BQU8sRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDbkQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRzdDLElBQWEsWUFBWSxHQUF6QixNQUFhLFlBQVk7SUFLdkIsWUFBMEMsTUFBbUI7UUFBbkIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUhyRCxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQXVELENBQUM7UUFDaEYsVUFBSyxHQUFHLElBQUksZUFBZSxDQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRy9DLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsVUFBVTthQUNaLElBQUksQ0FDSCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FDOUI7YUFDQSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTyxVQUFVO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3pFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQThCO1FBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTSxNQUFNLENBQUMsR0FBOEI7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVNLE9BQU8sQ0FBQyxHQUE4QjtRQUMzQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sT0FBTyxDQUFDLEdBQThCO1FBQzNDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFTSxLQUFLLENBQUMsS0FBWTtRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFTyxRQUFRLENBQUMsS0FBWTtRQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO1FBRWhGLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztpQkFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDYixTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7WUFDckYsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNILENBQUM7Q0FDRixDQUFBOzs0Q0FwRGMsTUFBTSxTQUFDLFlBQVk7O0FBTHJCLFlBQVk7SUFEeEIsVUFBVSxFQUFFO0lBTUUsV0FBQSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUE7O0dBTHRCLFlBQVksQ0F5RHhCO1NBekRZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FsZXJ0fSBmcm9tICcuLi9tb2RlbC9hbGVydC5tb2RlbCc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3ViamVjdCwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtBTEVSVF9DT05GSUd9IGZyb20gJy4uL2FsZXJ0LmNvbmZpZyc7XG5pbXBvcnQge0FsZXJ0Q29uZmlnfSBmcm9tICcuLi9tb2RlbC9hbGVydC1jb25maWcubW9kZWwnO1xuaW1wb3J0IHtzY2FuLCB0YWtlfSBmcm9tICdyeGpzL2ludGVybmFsL29wZXJhdG9ycyc7XG5pbXBvcnQge0FsZXJ0UmVkdWNlcn0gZnJvbSAnLi9hbGVydC5yZWR1Y2VyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFsZXJ0U2VydmljZSB7XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaGVyID0gbmV3IFN1YmplY3Q8eyBmbjogRnVuY3Rpb24sIGFsZXJ0OiBBbGVydCwgY29uZmlnOiBBbGVydENvbmZpZyB9PigpO1xuICBwcml2YXRlIHN0YXRlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxBbGVydFtdPihbXSk7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChBTEVSVF9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBBbGVydENvbmZpZykge1xuICAgIHRoaXMuaW5pdENvbmZpZygpO1xuICAgIHRoaXMuZGlzcGF0Y2hlclxuICAgICAgLnBpcGUoXG4gICAgICAgIHNjYW4oQWxlcnRSZWR1Y2VyLnJlZHVjZSwgW10pXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKHRoaXMuc3RhdGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0Q29uZmlnKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5jb25maWcpIHtcbiAgICAgIHRoaXMuY29uZmlnID0ge307XG4gICAgfVxuICAgIHRoaXMuY29uZmlnLnRpbWVvdXQgPSAhIXRoaXMuY29uZmlnLnRpbWVvdXQgPyB0aGlzLmNvbmZpZy50aW1lb3V0IDogNTAwMDtcbiAgICB0aGlzLmNvbmZpZy5tYXhNZXNzYWdlcyA9ICEhdGhpcy5jb25maWcubWF4TWVzc2FnZXMgPyB0aGlzLmNvbmZpZy5tYXhNZXNzYWdlcyA6IDU7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1lc3NhZ2VzKCk6IE9ic2VydmFibGU8QWxlcnRbXT4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHVibGljIGluZm8obXNnOiBzdHJpbmcgfCB7IGh0bWw6IHN0cmluZyB9KTogdm9pZCB7XG4gICAgdGhpcy5hZGRBbGVydCh7Y29udGVudDogbXNnLCB0eXBlOiAnaW5mbyd9KTtcbiAgfVxuXG4gIHB1YmxpYyBkYW5nZXIobXNnOiBzdHJpbmcgfCB7IGh0bWw6IHN0cmluZyB9KTogdm9pZCB7XG4gICAgdGhpcy5hZGRBbGVydCh7Y29udGVudDogbXNnLCB0eXBlOiAnZGFuZ2VyJ30pO1xuICB9XG5cbiAgcHVibGljIHN1Y2Nlc3MobXNnOiBzdHJpbmcgfCB7IGh0bWw6IHN0cmluZyB9KTogdm9pZCB7XG4gICAgdGhpcy5hZGRBbGVydCh7Y29udGVudDogbXNnLCB0eXBlOiAnc3VjY2Vzcyd9KTtcbiAgfVxuXG4gIHB1YmxpYyB3YXJuaW5nKG1zZzogc3RyaW5nIHwgeyBodG1sOiBzdHJpbmcgfSk6IHZvaWQge1xuICAgIHRoaXMuYWRkQWxlcnQoe2NvbnRlbnQ6IG1zZywgdHlwZTogJ3dhcm5pbmcnfSk7XG4gIH1cblxuICBwdWJsaWMgY2xvc2UoYWxlcnQ6IEFsZXJ0KTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaGVyLm5leHQoe2ZuOiBBbGVydFJlZHVjZXIucmVtb3ZlLCBhbGVydDogYWxlcnQsIGNvbmZpZzogdGhpcy5jb25maWd9KTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkQWxlcnQoYWxlcnQ6IEFsZXJ0KTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaGVyLm5leHQoe2ZuOiBBbGVydFJlZHVjZXIuYWRkLCBhbGVydDogYWxlcnQsIGNvbmZpZzogdGhpcy5jb25maWd9KTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy50aW1lb3V0ID4gMCkge1xuICAgICAgdGltZXIodGhpcy5jb25maWcudGltZW91dClcbiAgICAgICAgLnBpcGUodGFrZSgxKSlcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaGVyLm5leHQoe2ZuOiBBbGVydFJlZHVjZXIucmVtb3ZlLCBhbGVydDogYWxlcnQsIGNvbmZpZzogdGhpcy5jb25maWd9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=